server:
  port: ${CUSTOM.SERVER.PORT:9082}

# Circuit Breaker configuration
resilience4j:
  circuitbreaker:
    configs:
      mitocode-circuitbreaker: # cualquierId
        slidingWindowSize: 15
        failureRateThreshold: 20
        waitDurationInOpenState: 20s
        permittedNumberOfCallsInHalfOpenState: 8
        slowCallDurationThreshold: 1s
        slowCallRateThreshold: 50

    instances:
      user-service-cb:
        base-config: mitocode-circuitbreaker #cualquierId

# Cloud Gateway Routes
spring:
  cloud:
    gateway:
      routes:
        
        - id: user-service-route
          uri: lb://user-service # http://service1.com, http://service2.com
          predicates:
            - Path=/api/user-service/**
          filters:
            - StripPrefix=2
            # - AddRequestHeader=token, MyToken
            # - AddRequestParameter=email, choy
            # - AddResponseHeader=token, ${spring.cloud.gateway.routes[0].id:mitocode}

        - id: product-service-route
          uri: lb://product-service # http://service1.com, http://service2.com
          predicates:
            - Path=/api/product-service/**
          filters:
            - StripPrefix=2
            # Primera implementación de custom filter, con nombre de clase CustomFilter
            #- name: CustomFilter
            #  args:
            #    headerKey: MitocodeKey
            #    headerValue: MitocodeValue

            #Esta es con nombre declarado en un método
            - MitocodeFilter=MitocodeKey,MitocodeValue
            #- name: CircuitBreaker
            #  args:
            #    name: user-service-cb
            #    fallbackUri: forward:/api/user-service/mitocode/user
            #    statusCodes: 400, 401, 403, 500,503,504